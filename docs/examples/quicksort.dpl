// Example quicksort implementation in DPL
def quicksort(A: list, lo: int, hi: int):
    if lo >= 0 and lo < hi:
        p: list = partition(A, lo, hi)
        quicksort(A, lo, p[0] - 1)
        quicksort(A, p[1] + 1, hi)

def partition(A: list, lo: int, hi: int) -> list:
    pivot: int = A[(lo + hi) / 2]

    lt: int = lo
    eq: int = lo
    gt: int = hi

    while eq <= gt:
        if A[eq] < pivot:
            swap(A, eq, lt)
            lt = lt + 1
            eq = eq + 1
        else:
            if A[eq] > pivot:
                swap(A, eq, gt)
                gt = gt - 1
            else:
                eq = eq + 1
    
    return [lt, gt]

def swap(A: list, i: int, j: int):
    temp: int = A[i]
    A[i] = A[j]
    A[j] = temp

A: list = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]
quicksort(A, 0, len(A) - 1)

print("Sorted list: " + A)
