void Evaluator::visit(const std::shared_ptr<IntersectionExprNode> &node) {
    std::shared_ptr<AstNode> leftNode = node->getLeftNode();
    leftNode->accept(shared_from_this());
    std::shared_ptr<AstNode> rightNode = node->getRightNode();
    rightNode->accept(shared_from_this());

    if (!node->getLeftNode()->getVal().is<Value::TABLE>() ||
        !node->getRightNode()->getVal().is<Value::TABLE>()) {
            throw RuntimeException("Intersection operation only allowed for Table type");
    }

    Value::TABLE leftTable = leftNode->getVal().get<Value::TABLE>();
    Value::TABLE rightTable = rightNode->getVal().get<Value::TABLE>();
 
    if (leftTable->size() != rightTable->size()) {
        throw RuntimeException("Tables must have the same number of columns");
    }

    Value::TABLE table = std::make_shared<std::map<Value::STR, Value::COLUMN>>();

    for (const std::pair<Value::STR, std::shared_ptr<Value::COL_STRUCT>>& entryLeft : *leftTable) {
        std::pair<Value::STR, std::shared_ptr<Value::COL_STRUCT>> entryRight;
        bool columnFound = false;
        

        for (const std::pair<Value::STR, std::shared_ptr<Value::COL_STRUCT>> entryRight : *rightTable) {
            if (entryLeft.first == entryRight.first) {
                columnFound = true;
                break;
            }
        }

        if (!columnFound) throw RuntimeException("Column not found in right table");
    }

    
//        Value::STR header = entryRight.first;
//        Value::COLUMN col = std::make_shared<Value::COL_STRUCT>();
//        Value::LIST data = std::make_shared<std::vector<std::shared_ptr<Value>>>();
//
//        for (const std::shared_ptr<Value> &entryLeftData : *entryLeft.second->data) {
//            for (const std::shared_ptr<Value> &entryRightData : *entryRight.second->data) {
//                if (*entryLeftData == *entryRightData) {
//                    data->emplace_back(entryLeftData);
//                    break;
//                }
//            }
//        
//        col->parent = table;
//        col->header = header;
//        col->data = data;
//
//        table->insert({header, col});
    }
    node->setVal(table);
}